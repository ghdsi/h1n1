#!/usr/bin/python3

import csv
import glob
import os
import sys

# from tools import data_util, generate_full_data

CSV_FILE = "HealthMap_H1N1_Global_All_Languages_2009-2012.csv"
LAT_LNG_DECIMAL_PLACES = 4
SELF_DIR = os.path.dirname(os.path.realpath(__file__))

FIELDS = {
    "location": 0,
    "country": 1,
    "disease": 2,
    "species": 3,
    "language": 4,
    "alert-id": 5,
    "article-title": 6,
    "source-url": 7,
    "datetime": 8,
    "alert-tag": 9,
    "suspected-cases": 10,   # Can be ignored for now
    "suspected-deaths": 11,  # Can be ignored for now
    "confirmed-cases": 12,
    "confirmed-deaths": 13,
    "ruled-out": 14,         # Rarely used for this disease
    "longitude": 15,
    "latitude": 16,
}

def check_for_common_repo():
    if not os.path.exists("../common"):
        print("Please clone the 'common' repo as a sibling of this one:")
        print("cd .. && git clone git@github.com:globaldothealth/common.git")
        return False
    return True

def clean():
    for daily in glob.glob("d/*.json"):
        os.remove(daily)
    for country in glob.glob("c/*.json"):
        os.remove(country)

def round_latlng(l):
    if "." not in l:
        l += ".0000"
    (intpart, dec) = l.split(".")
    if len(dec) > LAT_LNG_DECIMAL_PLACES:
        # Just truncate
        dec = dec[0:4]
    elif len(dec) < LAT_LNG_DECIMAL_PLACES:
        dec += "0" * (LAT_LNG_DECIMAL_PLACES - len(dec))
    return intpart + "." + dec

def make_geoid(lat, lng):
    return round_latlng(lat) + "|" + round_latlng(lng)

def iso_date_from_datetime(dt):
    isodate = dt.split(" ")[0]
    assert isodate.count("-") == 2
    assert isodate.startswith("20")
    return isodate

def process_single_row(r, master_data, current_totals):
    geoid = make_geoid(r[FIELDS["latitude"]], r[FIELDS["longitude"]])
    country_code = country_converter.code_from_name(r[FIELDS["country"]])
    date = iso_date_from_datetime(r[FIELDS["datetime"]])
    if not geoid:
        print("WARNING No lat/lng for this row: " + str(r))
        return
    if not date:
        print("WARNING No date for this row: " + str(r))
        return
    if not country_code:
        print("WARNING Counldn't infer country in row " + str(r))
        return
    if date not in master_data:
        master_data[date] = {}
    if geoid not in master_data[date]:
        master_data[date][geoid] = {"new": 0, "total": 0}
    if geoid not in current_totals:
        current_totals[geoid] = 0
    cases = r[FIELDS["confirmed-cases"]].strip()
    if cases != "":
        master_data[date][geoid]["new"] += int(cases)
        current_totals[geoid] += int(cases)
        master_data[date][geoid]["total"] = current_totals[geoid]
    # print(geoid + " - " + date + " - " + country_code)
    return

def row_chronological_sort_function(row):
    return iso_date_from_datetime(row[FIELDS["datetime"]])

def sort_rows_chronologically(rows):
    rows.sort(key=row_chronological_sort_function)
    return rows

def process_csv_file(csv_file_path):
    master_data = {}
    current_totals = {}
    all_rows = []
    with open(csv_file_path) as f:
        reader = csv.reader(f)
        for row in reader:
            all_rows.append(row)
    sorted_rows = sort_rows_chronologically(all_rows)
    for row in sorted_rows:
        process_single_row(row, master_data, current_totals)
    grand_total = 0
    for total, _ in enumerate(current_totals):
        grand_total += total
    print("Processed a total of " + str(grand_total) + " cases")
    return master_data

def update():
    # generate_full_data.generate_data(
        # os.path.join(SELF_DIR, "d"),
        # os.path.join(SELF_DIR, "c"),
        # overwrite=True, quiet=False)
    # data_util.retrieve_generable_data(".", should_overwrite=True, quiet=False)
    # Note sure why there are two lines merged together for a couple of locations
    # os.system("./sanitize_location_info")
    master_data = process_csv_file(CSV_FILE)
    # print(master_data)
    # Add any new daily file.
    os.system("git add d/*.json")

if __name__ == "__main__":
    if check_for_common_repo():
        sys.path.insert(0, "../common/tools")
        import country_converter
        clean()
        update()
